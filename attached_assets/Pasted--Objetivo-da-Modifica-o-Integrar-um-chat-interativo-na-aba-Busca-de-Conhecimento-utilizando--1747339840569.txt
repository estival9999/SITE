**Objetivo da Modificação:** Integrar um chat interativo na aba "Busca de Conhecimento", utilizando o campo de pesquisa existente para enviar perguntas a um webhook n8n e exibir a resposta diretamente na página.

**Componente Principal a ser Modificado:** `project/src/components/knowledge/KnowledgeSearch.tsx`

**URL do Webhook n8n (para o Chat):** `https://mateusestival.app.n8n.cloud/webhook/662240cb-762b-4046-9cb1-ab3c386bf8a7/chat`

**Detalhes da Implementação:**

1.  **Estado do Componente (`KnowledgeSearch.tsx`):**
    * Manter o estado `searchTerm` para o campo de busca.
    * Adicionar novos estados para:
        * `chatResponse` (string ou null): Para armazenar a resposta recebida do n8n.
        * `isLoading` (boolean): Para indicar quando uma requisição está em andamento e exibir um feedback de carregamento.
        * `error` (string ou null): Para armazenar mensagens de erro caso a comunicação com o webhook falhe.

2.  **Lógica de Envio da Pergunta (Modificar `handleSearch`):**
    * Quando o formulário de busca for submetido (ou o botão de busca clicado):
        * Prevenir o comportamento padrão do formulário (para evitar recarregamento da página).
        * Verificar se `searchTerm` não está vazio.
        * Definir `isLoading` para `true` e limpar `chatResponse` e `error` anteriores.
        * Realizar uma requisição HTTP **POST** para a URL do webhook n8n: `https://mateusestival.app.n8n.cloud/webhook/662240cb-762b-4046-9cb1-ab3c386bf8a7/chat`.
        * **Corpo da Requisição (Payload):** Enviar a pergunta do usuário como um objeto JSON. Assumindo que o webhook n8n espera um campo chamado `message` (ou `question`), o corpo seria:
            ```json
            {
              "message": "CONTEÚDO_DO_SEARCHTERM"
            }
            ```
            * Certifique-se de que o `Content-Type` do header da requisição seja `application/json`.
        * **Tratamento da Resposta:**
            * Se a requisição for bem-sucedida (status 2xx):
                * Assumir que o n8n retorna um JSON com a resposta do chat (ex: `{ "reply": "Resposta do chat aqui..." }` ou similar). Extraia a mensagem de resposta.
                * Atualizar o estado `chatResponse` com a resposta recebida.
            * Se a requisição falhar:
                * Capturar o erro e atualizar o estado `error` com uma mensagem amigável (ex: "Desculpe, não foi possível obter uma resposta no momento.").
            * Independentemente do sucesso ou falha, definir `isLoading` para `false` ao final.

3.  **Interface do Usuário (UI) - Modificações em `KnowledgeSearch.tsx`:**
    * **Campo de Busca:** Manter o campo de input e o botão de busca existentes.
    * **Indicador de Carregamento:**
        * Abaixo do formulário de busca, quando `isLoading` for `true`, exibir um indicador visual de carregamento (ex: um spinner, ou a mensagem "Buscando resposta...").
    * **Exibição da Resposta:**
        * Abaixo do indicador de carregamento (ou do formulário, se não houver carregamento), quando `chatResponse` tiver conteúdo, exibir a resposta do chat de forma clara e legível.
        * Estilizar esta área para diferenciar a resposta da pergunta.
        * Se a resposta for longa, garantir que ela quebre a linha corretamente e seja rolável se necessário, sem quebrar o layout da página.
    * **Exibição de Erro:**
        * Se `error` tiver conteúdo, exibir a mensagem de erro de forma clara, preferencialmente perto da área de resposta ou do formulário.
    * **Limpeza da Resposta Anterior:** Ao fazer uma nova busca, a resposta anterior e qualquer erro devem ser limpos da tela enquanto a nova resposta está sendo carregada.

**Exemplo de Estrutura Visual na Aba "Busca de Conhecimento":**


| [ Título da Aba: Busca de Conhecimento ] |
| | | [ Campo de Input para Pergunta ] [Buscar] | <- Campo existente | |
| | | [ (Se isLoading=true) Spinner ou "Buscando..." ] | <- Novo: Indicador de Carregamento | |
| | | [ (Se chatResponse existe) ] | <- Novo: Área para Resposta do Chat | [ Resposta formatada do n8n aqui. ] | | [ ] | | |
| | | [ (Se error existe) ] | <- Novo: Área para Mensagem de Erro | [ Mensagem de erro aqui. ] | | |

**Considerações Técnicas para o Gerador de Sites:**

* Utilizar a função `fetch` nativa do JavaScript ou uma biblioteca como `axios` (se já estiver no projeto) para fazer a requisição HTTP POST.
* Garantir o tratamento adequado de promises (`async/await` é recomendado).
* Manter o código limpo e os estados bem gerenciados dentro do componente React.
* Aplicar estilos consistentes com o restante do tema do site (#5e8c6a, #88a65e, etc.) para a nova área de resposta e mensagens de feedback.

Este prompt deve fornecer ao gerador de sites as informações necessárias para implementar a integração do chat n8n.
