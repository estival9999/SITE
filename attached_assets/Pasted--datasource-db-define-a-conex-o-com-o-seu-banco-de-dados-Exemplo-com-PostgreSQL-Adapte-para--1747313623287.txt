// datasource db define a conexão com o seu banco de dados.
// Exemplo com PostgreSQL. Adapte para MySQL, SQLite, etc., conforme necessário.
datasource db {
  provider = "postgresql" // Ou "mysql", "sqlite", "sqlserver", "mongodb"
  url      = env("DATABASE_URL") // A URL do seu banco de dados virá de uma variável de ambiente
}

// generator client instrui o Prisma a gerar o Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// Enum para os papéis dos usuários
enum UserRole {
  ADMIN
  READER
}

// Enum para as áreas responsáveis pelos comunicados (usada também para área de atuação do Admin)
enum Department {
  CONTROLES_INTERNOS
  ADMINISTRATIVO
  CICLO_DE_CREDITO
}

// Enum para as categorias dos comunicados
enum Category {
  INFORMATIVO
  ATUALIZACAO
  DETERMINACAO
}

// Enum para os locais de direcionamento geográfico
enum Location {
  MARACAJU
  SIDROLANDIA
  AQUIDAUANA
  NIOAQUE
}

// Modelo para Usuários
model User {
  id        String   @id @default(cuid()) // ID único do usuário
  name      String   // Nome do usuário
  email     String   @unique // Email único do usuário
  password  String   // Senha do usuário (armazenar como hash na aplicação)
  role      UserRole @default(READER) // Papel do usuário

  // Campo para Admin: Define a área de atuação (opcional).
  // Se preenchido, o Admin só pode criar comunicados para esta 'Department'.
  actingDepartment Department?

  // Campo para Leitor: Define os locais aos quais o leitor tem acesso.
  // O Leitor visualizará comunicados direcionados a estes 'Location'.
  assignedLocations Location[]

  createdAt DateTime @default(now()) // Data de criação
  updatedAt DateTime @updatedAt // Data da última atualização

  // Relacionamentos
  createdAnnouncements   Announcement[]             @relation("UserCreatedAnnouncements") // Comunicados criados por este usuário
  askedQuestions         Question[]                 @relation("UserAskedQuestions") // Perguntas feitas por este usuário
  answeredQuestions      Question[]                 @relation("UserAnsweredQuestions") // Perguntas respondidas por este usuário (se for Admin)
  announcementReadStatuses AnnouncementReadStatus[] @relation("UserReadStatuses") // Status de leitura dos comunicados por este usuário

  @@map("users")
}

// Modelo para Comunicados
model Announcement {
  id          String     @id @default(cuid()) // ID único do comunicado
  title       String     // Título do comunicado
  message     String     @db.Text // Conteúdo do comunicado
  attachment  String?    // URL ou caminho para o anexo PDF (opcional)
  department  Department // Área Responsável pelo comunicado
  category    Category   // Categoria do comunicado

  // Locais para os quais este comunicado é direcionado.
  // Leitores com 'assignedLocations' correspondentes verão este comunicado.
  targetedLocations Location[]

  createdAt DateTime @default(now()) // Data de criação
  updatedAt DateTime @updatedAt // Data da última atualização

  authorId String // Chave estrangeira para o usuário que criou
  author   User   @relation("UserCreatedAnnouncements", fields: [authorId], references: [id], onDelete: Cascade) // Usuário criador

  // Relacionamentos
  questions    Question[]                 @relation("AnnouncementQuestions") // Perguntas relacionadas a este comunicado
  readStatuses AnnouncementReadStatus[]   @relation("AnnouncementReadStatuses") // Status de leitura deste comunicado

  @@index([authorId])
  @@index([department])
  @@index([category])
  // Não é possível indexar diretamente um array como targetedLocations em todos os bancos.
  // A filtragem por targetedLocations geralmente ocorre na lógica da aplicação ou com funcionalidades específicas do banco.
  @@map("announcements")
}

// Modelo para Perguntas e Respostas sobre Comunicados
model Question {
  id        String   @id @default(cuid()) // ID único da pergunta
  text      String   @db.Text // Texto da pergunta feita pelo usuário
  createdAt DateTime @default(now()) // Data de criação da pergunta
  updatedAt DateTime @updatedAt // Data da última atualização (ex: ao adicionar resposta)

  announcementId String       // Chave estrangeira para o comunicado
  announcement   Announcement @relation("AnnouncementQuestions", fields: [announcementId], references: [id], onDelete: Cascade) // Comunicado ao qual a pergunta se refere

  askerId String // Chave estrangeira para o usuário que perguntou
  asker   User   @relation("UserAskedQuestions", fields: [askerId], references: [id], onDelete: Cascade) // Usuário que fez a pergunta

  // Campos para a resposta do Admin
  answerText String?   @db.Text // Texto da resposta (opcional)
  answeredAt DateTime? // Data em que a resposta foi dada (opcional)

  answeredById String? // Chave estrangeira para o Admin que respondeu (opcional)
                      // Idealmente, este seria o 'author' do 'announcement'.
  answeredBy   User?   @relation("UserAnsweredQuestions", fields: [answeredById], references: [id], onDelete: SetNull) // Admin que respondeu

  isResolved Boolean @default(false) // Status para o Admin marcar se a questão foi resolvida/fechada

  @@index([announcementId])
  @@index([askerId])
  @@index([answeredById])
  @@map("questions")
}

// Modelo explícito para Status de Leitura (Muitos-para-Muitos entre User e Announcement)
// Isso permite o "flag verde interativo".
model AnnouncementReadStatus {
  userId         String    // Parte da chave primária composta
  announcementId String    // Parte da chave primária composta
  isRead         Boolean   @default(false) // Se o comunicado foi lido
  readAt         DateTime? // Data em que foi marcado como lido (opcional, pode ser útil para auditoria)

  user         User         @relation("UserReadStatuses", fields: [userId], references: [id], onDelete: Cascade)
  announcement Announcement @relation("AnnouncementReadStatuses", fields: [announcementId], references: [id], onDelete: Cascade)

  @@id([userId, announcementId]) // Chave primária composta
  @@map("announcement_read_statuses")
}
